<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no">
<meta http-equiv="X-UA-Compatible" content="ie=edge" />

<style>
	.choice-container {
		display: flex;
		margin-bottom: 0.5rem;
		width: 100%;
		font-size: 1.8rem;
		border: 0.1rem solid rgb(86, 165, 235, 0.25);
		background-color: white;
	}

	.choice-container:hover {
		cursor: pointer;
		box-shadow: 0 0.4rem 1.4rem 0 rgba(86, 185, 235, 0.5);
		transform: translateY(-0.1rem);
		transition: transform 150ms;
	}

	.choice-prefix {
		padding: 1.5rem 2.5rem;
		height:100%;
		background-color: #56a5eb;
		color: white;
	}	

	.flex-column {
		display: flex;
		flex-direction: column;
	}

	.flex-center {
		justify-content: center;
		align-items: center;
	}

	.justify-center {
		justify-content: center;
	}

	.choice-text {
		padding: 1.5rem;
		width: 100%;
	}

	.correct {
		background-color: #28a745;
	}

	.incorrect {
		background-color: #dc3545;
	}

	#hud {
		display: flex;
		justify-content: space-between;
	}
	
	.hud-prefix {
		text-align: center;
		font-size: 2rem;
	}

	.hud-main-text {
		text-align: center;
	}

	#progressBar {
		width: 20rem;
		height: 4rem;
		border: 0.3rem solid #56a5eb;
		margin-top: 1.5rem;
	}

	#progressBarFull {
		height: 3.4rem;
		background-color: #56a5eb;
		width: 0%;
	}

	#loader {
		border: 1.6rem solid white;
		border-radius: 50%;
		border-top: 1.6rem solid #56a5eb;
		width: 12rem;
		height: 12rem;
		position: fixed;
		top: 50%;
		left: 50%;
		animation: spin 2s linear infinite;
	}

	@keyframes spin {
		0% {
			transform: rotate(0deg);
		}
		100% {
			transform: rotate(360deg);
		}
	}
	
	.hidden {
		display: none;
	}
	
	i {
		border: solid white;
		color: white;
		border-width: 0 5px 5px 0;
		display: inline-block;
		padding: 3px;
		width: 50px;
		height: 50px;
	}

	.right {
		transform: rotate(-45deg);
		-webkit-transform: rotate(-45deg);
	}
	
	#btn {
		position:absolute;
		top:50%;
		right:5%;
		border:none;
		background-color:black;
		size: 100px;
	}
	
	#bt {
		position: absolute;
		right: 4%;
	}
</style>

    <div class="container">
      <div id="loader"></div>
      <div id="game" class="justify-center flex-column hidden">
        <div id="hud">
          <div id="hud-item">
            <p id="progressText" class="hud-prefix">Question</p>
            <div id="progressBar">
              <div id="progressBarFull"></div>
            </div>
          </div>
          <div id="hud-item">
            <p class="hud-prefix">Score</p>
            <h1 class="hud-main-text" id="score">0</h1>
          </div>
        </div>
        <h2 id="question"></h2>
        <div class="choice-container">
          <p class="choice-prefix">A</p>
          <p class="choice-text" data-number="1"></p>
        </div>
        <div class="choice-container">
          <p class="choice-prefix">B</p>
          <p class="choice-text" data-number="2"></p>
        </div>
        <div class="choice-container">
          <p class="choice-prefix">C</p>
          <p class="choice-text" data-number="3"></p>
        </div>
        <div class="choice-container">
          <p class="choice-prefix">D</p>
          <p class="choice-text" data-number="4"></p>
        </div>
      </div>
		<button id="btn"><i class="right"></i></button>
		<a href="/dashboard" id="bt" class="btn btn-secondary">Back</a>
    </div>
	
<script>
const question = document.getElementById("question");
const choices = Array.from(document.getElementsByClassName("choice-text"));
const progressText = document.getElementById("progressText");
const scoreText = document.getElementById("score");
const progressBarFull = document.getElementById("progressBarFull");
const loader = document.getElementById("loader");
const game = document.getElementById("game");

let currentQuestion = {};
let acceptingAnswers = false;
let score = 0;
let questionCounter = 0;
let availableQuesions = [];
let questions = [];

fetch("https://opentdb.com/api.php?amount=12&type=multiple")
  .then(res => {
    return res.json();
  })
  .then(loadedQuestions => {
    console.log(loadedQuestions.results);
    questions = loadedQuestions.results.map(loadedQuestion => {
      const formattedQuestion = {
        question: loadedQuestion.question
      };
      const answerChoices = [...loadedQuestion.incorrect_answers];
      formattedQuestion.answer = Math.floor(Math.random() * 3) + 1;
      answerChoices.splice(formattedQuestion.answer - 1, 0, loadedQuestion.correct_answer);
      answerChoices.forEach((choice, index) => {
        formattedQuestion["choice" + (index + 1)] = choice;
      });
      return formattedQuestion;
    });
    startGame();
  })
  .catch(err => {
    console.error(err);
  });

//CONSTANTS
const CORRECT_BONUS = 10;
const MAX_QUESTIONS = 12;
startGame = () => {
  questionCounter = 0;
  score = 0;
  availableQuesions = [...questions]; //spread operator it takes the questions from 'availblequestions' and spread its data into a new array that way if we apply changes to either one the other one will not be affected
  getNewQuestion();
  game.classList.remove("hidden");
  loader.classList.add("hidden");
};

getNewQuestion = () => {
  if (availableQuesions.length === 0 || questionCounter >= MAX_QUESTIONS) {
    sessionStorage.setItem("mostRecentScore", score);
    
	//go to the dashboard page
    return window.location.assign('/end');
  }
  questionCounter++;
  progressText.innerText = `Question ${questionCounter} / ${MAX_QUESTIONS}`; // es6 template where we can put a single back quote and the '$' and put everything we want in it without quotes for string ...
  
  //Update the progress bar
  progressBarFull.style.width = `${(questionCounter / MAX_QUESTIONS) * 100}%`;
  const questionIndex = Math.floor(Math.random() * availableQuesions.length);
  currentQuestion = availableQuesions[questionIndex];
  question.innerText = currentQuestion.question;
  choices.forEach(choice => {
    const number = choice.dataset["number"];
    choice.innerText = currentQuestion["choice" + number];
  });
  availableQuesions.splice(questionIndex, 1);
  acceptingAnswers = true;
};
choices.forEach(choice => {
  choice.addEventListener("click", e => {
    if (!acceptingAnswers) return;
    acceptingAnswers = false;
    const selectedChoice = e.target;
    const selectedAnswer = selectedChoice.dataset["number"];
    const classToApply = selectedAnswer == currentQuestion.answer ? "correct" : "incorrect";
    if (classToApply === "correct") {
      incrementScore(CORRECT_BONUS);
    }
    selectedChoice.parentElement.classList.add(classToApply);
    setTimeout(() => {
      selectedChoice.parentElement.classList.remove(classToApply);
      getNewQuestion();
    }, 1000);
  });
});
incrementScore = num => { //'num' is a parameter
  score += num;
  scoreText.innerText = score;
};
</script>